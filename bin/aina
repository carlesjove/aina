#!/usr/bin/env ruby
require 'gli'

require 'aina' 

include GLI::App

program_desc 'Code generator for WordPress themes'

version Aina::VERSION

# desc 'Describe some switch here'
# switch [:s,:switch]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'Generates a piece of code from a template'
arg_name 'element_type element_name'
command [:generate, :g] do |c|
  # c.desc 'Describe a switch to generate'
  # c.switch :s

  c.desc '[post_type] Content fields that a post_type supports, comma separated'
  c.default_value PostType::DEFAULT_SUPPORT
  c.arg_name 'supports'
  c.flag [:s, :supports]

  c.desc '[post_type] Capability type'
  c.default_value PostType::DEFAULT_CAPABILITY
  c.arg_name 'capability'
  c.flag [:c, :capability]

  c.action do |global_options,options,args|
    if Generable.accepts?(@type)
      element = Object.const_get(Generable.class_name_for @type).new(@name, options)
      #puts element.inspect ##### REMOVE
      element.generate
      puts "A #{@type} with name #{element.name} has been succesfully generated"
    else
      raise Exception, "#{@type} is not a generable piece of code. Options are: #{Generable.generable_types.join(', ')}"
    end
  end
end

desc 'Destroys a generated piece of code'
arg_name 'element_type element_name'
command [:destroy] do |c|
  c.action do |global_options,options,args|
    if Generable.accepts?(@type)
      element = Object.const_get(Generable.class_name_for @type).new(@name)
      if element.destroy
        puts "The #{@type} #{element.name} has been succesfully destroyed"
      end
    else
      raise Exception, "#{@type} is not a destroyable piece of code. Options are: #{Generable.generable_types.join(', ')}"
    end
  end
end

pre do |global,command,options,args|
  # unless is_wordpress_theme?
  #   puts "This does not look like a WordPress theme"
  #   return false
  # end

  #
  # This should be validated in generable.rb not here
  #
  # Here we should only validate that it's a WordPress installation
  @type = args.shift
  @name = args.shift
  
  if @type.nil?
    raise NoMethodError, 'You need to generate something'
  elsif @name.nil?
    raise NoMethodError, 'You need to put a name to what you want tot generate'
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
