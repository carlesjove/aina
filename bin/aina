#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'aina'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/aina` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/aina now"
  exit 64
end

include GLI::App

program_desc 'Code generator for WordPress themes'

version Aina::VERSION

# desc 'Describe some switch here'
# switch [:s,:switch]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'Generates a piece of code from a template'
arg_name 'element_type element_name'
command [:generate, :g] do |c|
  # c.desc 'Describe a switch to generate'
  # c.switch :s

  c.desc 'Content fields that a post_type supports'
  c.default_value 'title,editor,excerpt,thumbnail'
  c.arg_name 'supports'
  c.flag :s

  c.action do |global_options,options,args|
    element = Generable.new(@type, @name, options)
    unless element.is_generable?
      raise Exception, "#{element.type} is not a generable piece of code. Try #{Generable::GENERABLE_TYPES.keys}"
    end
    element.generate
    puts "A #{element.type} with name #{element.name} has been succesfully generated"
  end
end

desc 'Destroys a generated piece of code'
arg_name 'element_type element_name'
command [:destroy] do |c|
  c.action do |global_options,options,args|
    element = Generable.new(@type, @name)
    if element.destroy
      puts "The #{element.type} #{element.name} has been succesfully destroyed"
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  @type = args.shift
  @name = args.shift
  
  if @type.nil?
    raise NoMethodError, 'You need to generate something'
  elsif @name.nil?
    raise NoMethodError, 'You need to put a name to what you want tot generate'
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
